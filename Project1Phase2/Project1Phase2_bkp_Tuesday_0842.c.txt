/*
 * Project1Phase2.c
 *
 *  Created on: Jan 20, 2014
 *      Author: sivakarthik
 */

#include <stdio.h>
#include <stdlib.h>

void main(int argc, char *argv[]) {

  int pipe_proc1_instr[2], pipe_proc1_ackn[2], pipe_proc2_instr[2], pipe_proc2_ackn[2], pipe_parent_wait[2];
  int pid1, pid2;
  int proc1_pend_instr_cnt = 0, proc2_pend_instr_cnt = 0;
  char *instr;
  int i;

  FILE *file_ptr;

  if (argc < 2) {
	fprintf(stderr, "Please pass value of N through command line argument.\n");
	return;
  }

  const int N = strtol(argv[1], (char *)NULL, 10);

  printf("Value of N: %d\n", N);

  pipe(pipe_proc1_instr);
  pipe(pipe_proc1_ackn);
  pipe(pipe_proc2_instr);
  pipe(pipe_proc2_ackn);
  pipe(pipe_parent_wait);

  pid1 = fork();
  if(pid1 == 0) {
	  close(pipe_proc1_instr[1]);
	  close(pipe_proc1_ackn[0]);
	  close(pipe_proc2_instr[0]);
	  close(pipe_proc2_instr[1]);
	  close(pipe_proc2_ackn[0]);
	  close(pipe_proc2_ackn[1]);
	  close(pipe_parent_wait[0]);

	  int x, y;
	  long res;
	  while(1) {
		  read(pipe_proc1_instr[0], &i, sizeof(int));
		  instr = malloc(i * sizeof(char));
		  read(pipe_proc1_instr[0], instr, i);
		  printf("P1 Instr: %s\n",instr);
		  if(strncmp(instr,"fac 0 0",7) == 0) {
			printf("P1 Encountered end of instructions command.\n");
			break;
		  }
		  char* token = strtok(instr, " ");
	      x = (int) strtol(strtok(NULL, " "), (char *)NULL, 10);
	      y = (int) strtol(strtok(NULL, "\n"), (char *)NULL, 10);
		  int j;
		  res = 1;
		  for(j = 1; j <= x; j++) {
			  res = (res*(j%y))%y;
		  }
		  printf("P1 Factorial of %d mod %d is: %d\n",x,y,res);
		  memset(instr,0,i);
		  free(instr);
	  }
	  memset(instr,0,i);
	  free(instr);

	  printf("%s\n", "Child1 Exiting!!!");
	  exit(0);
  } else {
	  pid2 = fork();
	  if(pid2 == 0) {
		close(pipe_proc1_instr[0]);
		close(pipe_proc1_instr[1]);
		close(pipe_proc1_ackn[0]);
		close(pipe_proc1_ackn[1]);
		close(pipe_proc2_instr[1]);
		close(pipe_proc2_ackn[0]);
		close(pipe_parent_wait[0]);

  	    char *x;
		int y, res;
		while(1) {
			read(pipe_proc2_instr[0], &i, sizeof(int));
			instr = malloc(i * sizeof(char));
			read(pipe_proc2_instr[0], instr, i);
			printf("P2 Instr: %s\n",instr);
			if(strncmp(instr,"add stop",8) == 0) {
				printf("P2 Encountered end of instructions command.\n");
				break;
			}
			char* token = strtok(instr, " ");
		    x = strtok(NULL, " ");
		    y = (int) strtol(strtok(NULL, "\n"), (char *)NULL, 10);
			res = 0;
			FILE *file_ptr = fopen(x, "r");
			char *instr = malloc(100 * sizeof(char));
			fgets(instr,100,file_ptr);
			fgets(instr,100,file_ptr);
			memset(instr,0,100);
			free(instr);
			instr = malloc(100*sizeof(char));
			int j;
			while( ( fgets(instr,100,file_ptr) ) != NULL ) {
				instr = strtok(instr, "\n");
				j = (int) strtol(instr,(char *)NULL,10);
				printf("%d,",j);
				res = (res+(j%y))%y;
				memset(instr,0,100);
				free(instr);
				instr = malloc(100*sizeof(char));
			}
			fclose(file_ptr);
			printf("P2 Sum of numbers in %s mod %d is: %d\n",x,y,res);
			memset(instr,0,i);
			free(instr);
		}
		memset(instr,0,i);
		free(instr);

		printf("%s\n", "Child2 Exiting!!!");
		exit(0);
	} else {
		close(pipe_proc1_instr[0]);
		close(pipe_proc1_ackn[1]);
		close(pipe_proc2_instr[0]);
		close(pipe_proc2_ackn[1]);
		close(pipe_parent_wait[1]);

		file_ptr = fopen("instruction.dat", "r");
		instr = malloc(100 * sizeof(char));
		while( ( fgets(instr,100,file_ptr) ) != NULL ) {
			i = strlen(instr);
			if(strncmp(instr,"fac",3) == 0) {
				printf("PP Adding to Process1 Queue: %s, Length of instr: %d\n",instr,i);
				write(pipe_proc1_instr[1], &i, sizeof(int));
				write(pipe_proc1_instr[1], instr, i);
			} else if(strncmp(instr,"add",3) == 0) {
				printf("PP Adding to Process2 Queue: %s, Length of instr: %d\n", instr, i);
				write(pipe_proc2_instr[1], &i, sizeof(int));
				write(pipe_proc2_instr[1], instr, i);
			} else {
				fprintf(stderr,"Invalid command in instruction.dat file: %s\n",instr);
			}
			memset(instr,0,100);
			free(instr);
			instr = malloc(100 * sizeof(char));
		}
		fclose(file_ptr);

		instr = malloc(100 * sizeof(char));
		read(pipe_parent_wait[0],instr,1);
		memset(instr,0,100);
		free(instr);
		printf("%s\n", "Parent Exiting!!!");
		exit(0);
	}
  }
}





//  if (end == argv[1]) {
//    fprintf(stderr, "%s: not a decimal number\n", argv[1]);
//  }
//  else if ('\0' != *end) {
//    fprintf(stderr, "%s: extra characters at end of input: %s\n", argv[1], end);
//  }
//  else if ((LONG_MIN == sl || LONG_MAX == sl) && ERANGE == errno) {
//    fprintf(stderr, "%s out of range of type long\n", argv[1]);
//  }
//  else if (sl > INT_MAX) {
//    fprintf(stderr, "%ld greater than INT_MAX\n", sl);
//  }
//  else if (sl < INT_MIN) {
//     fprintf(stderr, "%ld less than INT_MIN\n", sl);
//  }
//  else {
//    si = (int)sl;
//    printf("integer input is: %d\n",si);
//
//    /* Process si */
//
//  }
